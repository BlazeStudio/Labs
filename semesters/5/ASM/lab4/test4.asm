; Лабораторная работа №4
; Выполнил: студент группы XXX-311 XXXXXXXXXXXXXXXXX
; Вариант: "Сумма всех элементов, которые предшествуют элементу, равному P"
; Дан двумерный массив A(4x5).
; Сформировать одномерный массив B(4), каждый элемент которого: 
; Сумма всех элементов, которые предшествуют элементу, равному P (если P не найден, сумма = 0)

.486
.model flat, stdcall
option casemap: none
.stack 100h

;=========================================
include <\masm32\include\kernel32.inc>
includelib <\masm32\lib\kernel32.lib>
;=========================================

.data
N  equ 4                 ; количество строк
M  equ 5                 ; количество столбцов
P  equ 7                ; искомое значение P

A  db 1, -5, 2, -4, 5    ; строка 1
    db -2, 7, -3, 9, 0   ; строка 2 (содержит P)
    db -4, 2, 5, 7, 9   ; строка 3 (содержит P)
    db 3, -4, 2, 0, 1    ; строка 4
B  db 4 dup (?)          ; результирующий массив B, инициализированный

;==================================================
.code
main:
    ; Подготовка для цикла по строкам
    mov ecx, N           ; счетчик строк массива A
    mov ebx, 0           ; смещение для первой строки массива A
    mov edi, 0           ; смещение для первого элемента массива B

stroka:                  ; начало цикла по строкам (внешний цикл)
    mov eax, 0           ; обнуляем сумму (будет храниться в EAX)
    mov esi, 0           ; смещение для элементов в строке
    mov edx, 0           ; флаг обнаружения P

next:                    ; начало цикла по элементам строки (внутренний цикл)
    movsx edx, A[ebx + esi] ; загружаем текущий элемент как знаковый байт в EDX
    cmp edx, P           ; сравниваем текущий элемент с P
    je found_P           ; если найден P, переход к обработке
    add eax, edx         ; добавляем элемент к сумме
    add esi, 1           ; смещение на следующий элемент
    cmp esi, M           ; проверяем, не вышли ли за пределы строки
    jl next              ; если еще есть элементы, продолжить цикл

found_P:
    mov B[edi], al       ; записываем младший байт суммы в массив B
    add ebx, M           ; смещение для начала следующей строки массива A
    add edi, 1           ; смещение для следующего элемента массива B
    loop stroka          ; продолжаем цикл по строкам

    invoke ExitProcess, 0 ; завершение программы
end main
