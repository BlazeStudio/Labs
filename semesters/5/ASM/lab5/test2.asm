.486
.model flat, stdcall
option casemap: none
.stack 100h

;=========================================
include <\masm32\include\kernel32.inc>
includelib <\masm32\lib\kernel32.lib>
;=========================================

.data
N  equ 4                 ; количество строк
M  equ 5                 ; количество столбцов
P  equ 7                 ; искомое значение P

A  db 1, -5, 2, -4, 5    ; строка 1
    db -2, 7, -3, 9, 0   ; строка 2 (содержит P)
    db -4, 2, 5, 7, 9    ; строка 3 (содержит P)
    db 8, -4, 2, 0, 7    ; строка 4 (содержит Р)
B  db 4 dup (?)          ; результирующий массив B, инициализированный

;==================================================
.code
process_row proc
    ; Входные параметры:
    ; [ebp+8]  - адрес начала строки
    ; [ebp+12] - количество элементов в строке
    ; [ebp+16] - значение P для поиска

    push ebp              ; сохранить текущий ebp
    mov ebp, esp          ; установить ebp для работы с параметрами
    push ecx              ; сохранить регистры
    push ebx
    push edx

    mov eax, 0            ; обнулить сумму (будет в AL)
    mov ebx, [ebp+8]      ; адрес начала строки
    mov ecx, [ebp+12]     ; количество элементов в строке
    mov edx, [ebp+16]     ; значение P для поиска

find_P:
    movsx esi, byte ptr [ebx] ; загружаем текущий элемент как знаковый байт в ESI
    cmp esi, edx          ; сравнить текущий элемент с P
    je found_P            ; если найден P, переход к найденному
    add al, byte ptr [ebx] ; добавить к сумме
    add ebx, 1            ; переход к следующему элементу
    loop find_P           ; продолжить пока не достигнем конца строки

    ; Если цикл завершен, и P не найден, обнулить AL
    mov al, 0
    jmp end_proc          ; переход к завершению процедуры

found_P:
    ; Если P найден, оставить текущую сумму в AL

end_proc:
    pop edx               ; восстановить регистры
    pop ebx
    pop ecx
    pop ebp
    ret 12                ; очистить параметры из стека и вернуться
process_row endp

main:
    mov ecx, N            ; счетчик строк матрицы A
    mov edi, 0            ; смещение для массива B
    lea ebx, A            ; адрес первой строки матрицы A

process_matrix:
    push P                ; значение для поиска P
    push M                ; количество элементов в строке
    push ebx              ; адрес начала строки
    call process_row      ; вызов процедуры

    mov B[edi], al        ; записать результат в массив B
    add ebx, M            ; переход к следующей строке
    add edi, 1            ; переход к следующему элементу массива B
    loop process_matrix   ; продолжить цикл по строкам

    invoke ExitProcess, 0 ; завершение программы
end main
