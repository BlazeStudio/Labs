; Лабораторная работа №3
; Выполнил: студент группы XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
; Вариант: 5
; Программа выполняет операции над ASCII кодами первой буквы фамилии и имени студента.
; Используются логические и сдвиговые операции.

.486
.model flat, stdcall
option casemap:none
.stack 100h

;=========================================
include c:\masm32\include\kernel32.inc
include c:\masm32\include\user32.inc
includelib c:\masm32\lib\kernel32.lib
includelib c:\masm32\lib\user32.lib
;=========================================
.data
A db "Ы"           ; ASCII код первой буквы фамилии (прописная буква)
B db "й"           ; ASCII код первой буквы имени (строчная буква)
tit db "Результат", 0 ; Заголовок окна MessageBox
rez db ?           ; Переменная для хранения результата

;=========================================
.code
main:
    ; Загрузка ASCII кодов в регистры
    mov al, A      ; Загружаем ASCII код A в AL
    mov bl, B      ; Загружаем ASCII код B в BL

    ; Выполнение операции (A AND B) OR B => CL
    and al, bl     ; Выполняем A AND B, результат в AL
    or al, bl      ; Выполняем (A AND B) OR B, результат в AL
    mov cl, al     ; Сохраняем результат в регистре CL (R = CL)

    ; 2. Если 4-й бит R (CL) равен 0, то записываем 1 в 6-й бит R, иначе 0
    test cl, 00010000b ; Проверка 4-го бита (бит с индексом 4)
    jnz skip_set_k    ; Если 4-й бит равен 1, пропустить установку
    or cl, 01000000b  ; Установка 6-го бита в 1, если 4-й бит был равен 0
skip_set_k:

    ; 3. Инвертирование 5-го бита регистра R (CL)
    xor cl, 00100000b ; Инвертирование 5-го бита

    ; 4. Поменять местами тетрады байта, записанного в регистре R (CL)
    mov al, cl        ; Копия регистра CL в AL
    shr cl, 4         ; Сдвиг CL вправо на 4 бита (оставляем правую тетраду)
    shl al, 4         ; Сдвиг AL влево на 4 бита (оставляем левую тетраду)
    or cl, al         ; Объединение тетрад в CL

    ; 5. Если R < 32, прибавить к R 32
    cmp cl, 32        ; Сравнение значения в CL с 32
    jae skip_add_32   ; Если значение >= 32, пропустить добавление
    add cl, 32        ; Иначе добавляем 32
skip_add_32:

    ; 6) Вывести на экран символ, код которого в регистре R
    mov rez, CL        ; Записываем код символа в rez
    invoke MessageBox, 0, OFFSET rez, OFFSET tit, 0

    ; Завершение программы
    invoke ExitProcess, 0

end main
